// Autogenerated from Pigeon (v9.1.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif



private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol PianoAnalyticsApi {
  func configure(collectDomain: String, siteId: Int64) throws
  func sendEvent(eventName: String, eventProperties: [String: String]) throws
  func getVersion() throws -> String
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class PianoAnalyticsApiSetup {
  /// The codec used by PianoAnalyticsApi.
  /// Sets up an instance of `PianoAnalyticsApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: PianoAnalyticsApi?) {
    let configureChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.PianoAnalyticsApi.configure", binaryMessenger: binaryMessenger)
    if let api = api {
      configureChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let collectDomainArg = args[0] as! String
        let siteIdArg = (args[1] is Int) ? Int64(args[1] as! Int) : args[1] as! Int64
        do {
          try api.configure(collectDomain: collectDomainArg, siteId: siteIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      configureChannel.setMessageHandler(nil)
    }
    let sendEventChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.PianoAnalyticsApi.sendEvent", binaryMessenger: binaryMessenger)
    if let api = api {
      sendEventChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let eventNameArg = args[0] as! String
        let eventPropertiesArg = args[1] as! [String: String]
        do {
          try api.sendEvent(eventName: eventNameArg, eventProperties: eventPropertiesArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      sendEventChannel.setMessageHandler(nil)
    }
    let getVersionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.PianoAnalyticsApi.getVersion", binaryMessenger: binaryMessenger)
    if let api = api {
      getVersionChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getVersion()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getVersionChannel.setMessageHandler(nil)
    }
  }
}
